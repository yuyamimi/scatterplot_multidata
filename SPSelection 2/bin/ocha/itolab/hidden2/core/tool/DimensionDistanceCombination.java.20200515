package ocha.itolab.hidden2.core.tool;

import ocha.itolab.hidden2.core.data.*;

public class DimensionDistanceCombination {
	static DimensionPair[] parray = null;
	static IndividualSet iset;
	static int NUMDIST = 4;
	static double distarray[][];
	
	public static DimensionPair[] calc(IndividualSet is) {
		iset = is;
		
		distarray = new double[is.getNumExplain() * is.getNumObjective()][NUMDIST];	
		parray = new DimensionPair[distarray.length];
		System.out.println("test2");
		
		for(int i = 0, count = 0; i < is.getNumExplain(); i++) {
			for(int j = 0; j < is.getNumObjective(); j++, count++) {
				distarray[count][0] = DimensionDistanceCorrelation.calcCorrelationOnePair(iset, i, j);
				distarray[count][1] = DimensionDistanceEntropy.calcEntropyOnePair(iset, i, j);
				distarray[count][2] = DimensionDistanceSkinny.calcSkinnyOnePair(iset, i, j);
				distarray[count][3] = DimensionDistanceClumpy.calcClumpyOnePair(iset, i, j);
			}
		}
		
		System.out.println("  DimensionDistanceCombination.calc");
		applyGraphColoring();
		
		return parray;
	}


	
	static double MIN_VECTOR = 0.01;
	
	//static int numdim = 0, numphoto = 0, numselect = 0;
  
	//static double feature[][];
	static double features[][];
	static double sum[];
	static double sum2[];
	static int sort[];
	static double s[][];
	static int adj[][];
	static double naarray[];
	static double nbarray[];
	static double inparray[];
	
	
	public static void setMinimimDistance(double d) {
		MIN_VECTOR = d;
	}
	
  	
  	static void applyGraphColoring() {
  		
  		features = new double[NUMDIST][];
  		for(int i = 0; i < NUMDIST; i++) 
  			features[i] = new double[distarray.length];
  		
  		sum = new double[distarray.length];
  		sum2 = new double[distarray.length];
  		sort = new int[distarray.length];
  		for(int i = 0; i < distarray.length; i++)
  			sort[i] = i;
  		
  		s = new double[distarray.length][];
  		adj = new int[distarray.length][];
  		for(int i = 0; i < distarray.length; i++) {
  			s[i] = new double[distarray.length];
  			adj[i] = new int[distarray.length];
  		}
  		
  		naarray = new double[NUMDIST];
  		nbarray = new double[NUMDIST];
  		inparray = new double[NUMDIST];

  		for(int i= 0; i < distarray.length; i++){
  			for(int j = 0; j < NUMDIST; j++){
  				double onedim = distarray[i][j] * distarray[i][j];
  				sum[i] += onedim;
  				sum2[i] += onedim;
  				/*
  				sum[i] += feature[j][i];
  				sum2[i] += feature[j][i];
  				*/
  			}
  		}
  
  		
  		for(int i = 0; i < distarray.length; i++){
  			for(int j = (i + 1); j < distarray.length; j++){
  				if(sum2[i] < sum2[j]){
  					double tmp = sum2[i];
  					sum2[i] = sum2[j];
  					sum2[j] = tmp;

  					int tp = sort[i];
  					sort[i] = sort[j];
  					sort[j] = tp;
  				}
  			}
  		} 

  		for(int j = 0; j < distarray.length; j++){
  			for(int i = 0; i < NUMDIST; i++){
  				features[i][j] = distarray[sort[j]][i];
  			}
  		}

  		double na = 0.0, nb = 0.0, inp = 0.0;
  		for(int j = 0; j < distarray.length; j++){
  			for(int j2 = 0; j2 < distarray.length; j2++){
  				for(int i = 0; i < NUMDIST; i++){
  					naarray[i] = features[i][j] * features[i][j];
  					nbarray[i] = features[i][j2] * features[i][j2];
  					inparray[i] = features[i][j] * features[i][j2];
  					na = naarray[i] + na;
  					nb = nbarray[i] + nb;
  					inp = inp + inparray[i];
  				}
  				s[j][j2] = na * nb - inp * inp;
  				na = nb = inp = 0.0;
  			}
  		}

  		int pcounter = 0, ncounter = 0;
  		double sup = MIN_VECTOR;
  		for(int j = 0; j < distarray.length; j++){
  			for(int j2 = 0; j2 < distarray.length; j2++){
  				if(s[j][j2] > sup){
  					adj[j][j2] = 0; 
  					ncounter++;
  				}
  				else{
  					adj[j][j2] = 1;
  					pcounter++;
  				}
  			}
  		}
 
  		int d[][];
  		d = new int[distarray.length][];
  		for(int i = 0; i < distarray.length; i++)
  			d[i] = new int[2];
  	
  		for(int j = 0; j < distarray.length; j++){
  			d[j][1] = 0;
  			d[j][0] = j;
  			for(int j2 = 0; j2 < distarray.length; j2++){
  				d[j][1] = d[j][1] + adj[j][j2];
  			}
  		}
 
  		for(int p = 0; p < distarray.length; p++){
  			for(int q = (p + 1); q < distarray.length; q++){
  				if(d[p][1] < d[q][1]){
  					int tmp = d[p][1];
  					d[p][1] = d[q][1];
  					d[q][1] = tmp;

  					tmp = d[p][0];
  					d[p][0] = d[q][0];
  					d[q][0] = tmp;
  				}
  			}
  		}
 
  		int c[];
  		c = new int[distarray.length];
  		int numcolor = 1, numfix = 0;
  		
  		for(int j = 0; j < distarray.length; j++){
  			if(c[d[j][0]] < 1){
  				c[d[j][0]] = numcolor;
  				for(int j2 = (j + 1); j2 < distarray.length; j2++){
  					if(adj[d[j][0]][d[j2][0]] == 0){  
  						if(c[d[j2][0]] < 1){
  							c[d[j2][0]] = numcolor;
  						}
  					}
  				}
  				numcolor++;
  			}
  		}
  		System.out.println("   numcolor=" + numcolor + "  numedge=" + pcounter + "/" + (pcounter+ncounter) + " d=" + MIN_VECTOR);
  		
  		int count = 0;
  		//for(int j = 0; j < distarray.length; j++){
  		for(int j = distarray.length - 1; j >= 0; j--){
  			//System.out.println("         j=" + j + " sort[j]=" + sort[j] + " c[j]=" + c[j]);
  			if(c[j] == 1){
  				DimensionPair p = new DimensionPair();
  				p.id1 = sort[j] / iset.getNumObjective(); 
  				p.id2 = sort[j] - p.id1 * iset.getNumObjective();
  				p.r = sum[sort[j]];
  				parray[count++] = p;
  				//System.out.println(distarray[sort[j]][0] + "," + distarray[sort[j]][1] + "," + distarray[sort[j]][2] + "," + distarray[sort[j]][3]);
  				System.out.println(p.r);
  			}
  		}
  		for(int j = count; j < distarray.length; j++)
  			parray[j] = null;
  		
  	}
}
